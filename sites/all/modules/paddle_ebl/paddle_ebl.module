<?php

/**
 * @file
 * Main functions and hook implementations for the Paddle EBL module.
 */

include_once 'paddle_ebl.features.inc';

/**
 * Implements hook_feeds_plugins().
 */
function paddle_ebl_feeds_plugins() {
  $info = array();

  $info['FeedsEBLPublicationFetcher'] = array(
    'name' => 'EBL HTTP Fetcher',
    'description' => 'Download EBL documents from a URL.',
    'handler' => array(
      'parent' => 'FeedsHTTPFetcher',
      'class' => 'FeedsEBLPublicationFetcher',
      'file' => 'FeedsEBLPublicationFetcher.inc',
      'path' => drupal_get_path('module', 'paddle_ebl') . '/plugins/feeds',
    ),
  );

  return $info;
}

/**
 * Implements hook_cron().
 */
function paddle_ebl_cron() {
  /** @var FeedsSource $src */
  $src = feeds_source('paddle_ebl_publication_importer');
  $src->save();

  $src_url = paddle_ebl_build_url('source');
  $config = array('FeedsEBLPublicationFetcher' => array('source' => $src_url));
  $src->addConfig($config);
  $src->save();

  try {
    $src->import();
    $src->schedule();
  }
  catch (Exception $e) {
    return FALSE;
  }
  // Prevent notices from being thrown.
  $src->state(FEEDS_FETCH);
  $src->state(FEEDS_PROCESS);
  $src->state(FEEDS_PROCESS_CLEAR);
}

/**
 * Implements hook_feeds_after_parse().
 */
function paddle_ebl_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  $forbidden_statuses = array(
    'Nog niet beschikbaar',
    'Niet meer downloadbaar',
    'Verouderd',
  );

  foreach ($result->items as $key => $item) {
    // Check the statuses to see if the publication is available.
    if (!empty($item['statuses'])) {
      foreach ($item['statuses'] as $status) {
        if (in_array($status['available']['name'], $forbidden_statuses)) {
          unset($result->items[$key]);
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_feeds_presave().
 */
function paddle_ebl_feeds_presave(FeedsSource $source, $entity, $item, $entity_id) {
  if (substr($source->id, 0, 10) === 'paddle_ebl') {
    /** @var \EntityDrupalWrapper $wrapper */
    $wrapper = entity_metadata_wrapper('node', $entity);

    // Map the image fields.
    if (!empty($item['covers'][0])) {
      $cover = $item['covers'][0];
      $alt_tag = t('Publication Cover');

      if (!empty($cover['title'])) {
        $alt_tag = $cover['title'];
      }

      if (!empty($cover['thumbnail_url'])) {
        paddle_ebl_map_imagefield($wrapper, 'field_paddle_featured_image',
          $cover['thumbnail_url'], $alt_tag);
      }

      if (!empty($cover['url'])) {
        paddle_ebl_map_imagefield($wrapper, 'field_paddle_ebl_main_image',
          $cover['url'], $alt_tag);
      }
    }
    $wrapper->field_paddle_ebl_document_links->set(array());

    // Save the documents if there are any.
    if (!empty($item['documents'])) {
      $documents = $item['documents'];

      if (!empty($documents[0]['issuu_document']['issuu_file_document_name'])) {
        $link_prefix = 'https://issuu.com/vlaanderen-be/docs/';
        $issuu_name = $documents[0]['issuu_document']['issuu_file_document_name'];
        $wrapper->field_paddle_ebl_issuu_link->set(array('value' => $link_prefix . $issuu_name));
      }

      if (!empty($documents[0]['issuu_document']['issuu_file_document_id'])) {
        $link_prefix = '//e.issuu.com/legacy.html?documentId=';
        $issuu_id = $documents[0]['issuu_document']['issuu_file_document_id'];
        $wrapper->field_paddle_ebl_issuu_viewer->set(array('value' => $link_prefix . $issuu_id));
      }

      foreach ($documents as $document) {
        $wrapper->field_paddle_ebl_document_links[] = array(
          'title' => $document['title'],
          'value' => $document['url'],
        );
      }
    }

    $wrapper->field_paddle_ebl_external_urls->set(array());

    // Save the external URLs if there are any.
    if (!empty($item['external_urls'])) {
      $external_urls = $item['external_urls'];

      foreach ($external_urls as $external_url) {
        $wrapper->field_paddle_ebl_external_urls[] = array(
          'title' => $external_url['title'],
          'value' => $external_url['url'],
        );
      }
    }

    if (!empty($item['themes'])) {
      $themes = $item['themes'];
      $theme_string = '';

      foreach ($themes as $theme) {
        $theme_string .= $theme['name'] . ', ';
      }
      // Remove the last ', '.
      $theme_string = substr($theme_string, 0, -2);
      $wrapper->field_paddle_ebl_themes->set($theme_string);
    }
  }
}

/**
 * Implements hook_feeds_after_save().
 */
function paddle_ebl_feeds_after_save(FeedsSource $source, $entity, $item, $entity_id) {
  if ($entity->type == 'paddle_ebl_page') {
    workbench_moderation_moderate($entity, 'published');
  }
}

/**
 * Maps an image field to the EBL page.
 *
 * @param \EntityMetadataWrapper $wrapper
 *   The wrapped EBL page.
 * @param string $field_name
 *   The name of the image field.
 * @param string $url
 *   The external URL of the image to be mapped.
 * @param string $alt_tag
 *   The alt tag of the image to be mapped.
 */
function paddle_ebl_map_imagefield(EntityMetadataWrapper $wrapper, $field_name, $url, $alt_tag) {
  $file = system_retrieve_file($url, NULL, TRUE, FILE_EXISTS_REPLACE);

  if ($file) {
    // Create a new atom and save it.
    $atom = new ScaldAtom('image', 'paddle_scald_image', array(
      'file_source' => $file->uri,
      'title' => $file->filename,
      'base_id' => $file->fid,
    ));
    scald_atom_save($atom);

    $atom_wrapper = entity_metadata_wrapper('scald_atom', $atom);
    $atom_wrapper->scald_thumbnail->set((array) $file);
    $atom_wrapper->field_scald_alt_tag->set($alt_tag);
    $atom_wrapper->save();
    $wrapper->{$field_name}->set(array('sid' => $atom->sid));
  }
}

/**
 * Builds the source URL which we need in the feed based on Drupal variables.
 *
 * @param string $type
 *   Which type of URL you'd like to receive.
 *
 * @return string
 *   The complete source URL.
 */
function paddle_ebl_build_url($type) {
  $domain = variable_get('paddle_ebl_source_domain', '');
  $key = variable_get('paddle_ebl_source_key', '');

  switch ($type) {
    case 'source':
      $arguments = variable_get('paddle_ebl_source_arguments', '');
      return 'https://' . $domain . '/search/' . $key . '/find/publication/' . $arguments;

    case 'detail':
      return 'https://' . $domain . '/search/' . $key . '/detail/publication/';

    default:
      return '';
  }
}

/**
 * Implements hook_paddle_content_manager_additional_fields().
 */
function paddle_ebl_paddle_content_manager_additional_fields() {
  $menu_object = menu_get_object();

  if (isset($menu_object)) {
    if ($menu_object->type == 'paddle_ebl_page') {
      return array(
        'field_paddle_ebl_subtitle',
        'field_paddle_ebl_publisher',
        'field_paddle_ebl_authors',
        'field_paddle_ebl_series',
        'field_paddle_ebl_themes',
        'field_paddle_ebl_document_links',
        'field_paddle_ebl_external_urls',
        'field_paddle_ebl_document_type',
        'field_paddle_ebl_language',
        'field_paddle_ebl_main_image',
        'field_paddle_ebl_issuu_link',
        'field_paddle_ebl_pub_date',
        'field_paddle_ebl_issuu_viewer',
      );
    }
  }

  return array();
}

/**
 * Implements hook_paddle_content_region_extra_content_regions().
 */
function paddle_ebl_paddle_content_region_extra_content_regions($content_type) {
  $regions = array();

  if ($content_type == 'paddle_ebl_page') {
    $regions = array(
      'row_1_right' => t('B'),
      'row_2_left' => t('C'),
      'row_2_middle' => t('D'),
      'row_2_right' => t('E'),
      'bottom_row' => t('F'),
    );
  }

  return $regions;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function paddle_ebl_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_theme().
 */
function paddle_ebl_theme($existing, $type, $theme, $path) {
  return array(
    'paddle_ebl_links' => array(
      'path' => $path . '/templates',
      'template' => 'paddle-ebl-links',
    ),
    'paddle_ebl_metadata' => array(
      'path' => $path . '/templates',
      'template' => 'paddle-ebl-metadata',
    ),
    'paddle_ebl_urls' => array(
      'path' => $path . '/templates',
      'template' => 'paddle-ebl-urls',
    ),
    'paddle_ebl_cover' => array(
      'path' => $path . '/templates',
      'template' => 'paddle-ebl-cover',
    ),
  );
}

/**
 * Implements hook_search_api_sorts_default_sort_alter().
 */
function paddle_ebl_search_api_sorts_default_sort_alter(&$default_sort, $search_sorts, $keys) {
  // We can only retrieve the advanced search node from the menu.
  foreach ($search_sorts as $key => $search_sort) {
    if ($search_sort->name == 'Publication date') {
      $search_sorts[$key]->field = 'field_paddle_ebl_pub_date';
    }
  }
}

/**
 * Implements hook_preprocess_search_api_page_result().
 */
function paddle_ebl_preprocess_search_api_page_result(&$variables) {
  if (!empty($variables['item'])) {
    $node_wrapper = entity_metadata_wrapper('node', $variables['item']);

    if (!empty($node_wrapper->field_paddle_ebl_pub_date) && !empty($node_wrapper->field_paddle_ebl_pub_date->value())) {
      $variables['publication_date'] = date('F Y',
        $node_wrapper->field_paddle_ebl_pub_date->value());
    }
  }
}
