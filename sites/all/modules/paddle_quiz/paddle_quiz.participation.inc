<?php

/**
 * @file
 * Contains form callbacks for participating in the quiz.
 */

/**
 * Form callback to display the quiz (multi-step form).
 */
function paddle_quiz_participation_form($form, &$form_state) {
  // Make sure this file is always included on ajax calls.
  $form_state['build_info']['files'][] = array(
    'type' => 'inc',
    'module' => 'paddle_quiz',
    'name' => 'paddle_quiz.participation',
  );

  // Update the form array for the current step.
  paddle_quiz_participation_form_step_callback($form, $form_state);

  $form['#prefix'] = '<div id="paddle-quiz-form-container">';
  $form['#suffix'] = '</div>';

  $form['#attached']['css'][] = drupal_get_path('module', 'paddle_quiz') . '/css/paddle_quiz.quiz.css';

  // Add a custom CSS file if one has been uploaded.
  $cache = paddle_quiz_participation_form_cache_get($form_state);
  $quiz = !empty($cache->quiz) ? $cache->quiz : $form_state['paddle_quiz'];
  if (!empty($quiz->field_paddle_quiz_css[LANGUAGE_NONE][0]['uri'])) {
    $css = $quiz->field_paddle_quiz_css[LANGUAGE_NONE][0]['uri'];
    $form['#attached']['css'][] = $css;
  }

  // Attach scroll-to-form javascript to the form if it hasn't been already.
  $scroll_js = drupal_get_path('module', 'paddle_quiz') . '/js/scroll-to-form.js';
  $attached_js = !empty($form['#attached']['js']) ? $form['#attached']['js'] : array();
  if (!in_array($scroll_js, $attached_js)) {
    $form['#attached']['js'][] = $scroll_js;
  }

  // Return the form array to be rendered.
  return $form;
}

/**
 * Form callback when re-rendering the form on an ajax request.
 *
 * We simply pass along the form as it was generated by
 * paddle_quiz_participation_form().
 *
 * Specifying paddle_quiz_participation_form() as the ajax callback does not
 * work after the first ajax request.
 *
 * @param array $form
 *   Form render array.
 * @param array $form_state
 *   Form state array.
 *
 * @return array
 *   Form render array to display after the ajax request.
 */
function paddle_quiz_participation_form_ajax($form, &$form_state) {
  return $form;
}

/**
 * Validate function for the quiz form.
 */
function paddle_quiz_participation_form_validate(&$form, &$form_state) {
  paddle_quiz_participation_form_step_callback($form, $form_state, 'validate');
}

/**
 * Submit function for the quiz form.
 */
function paddle_quiz_participation_form_submit(&$form, &$form_state) {
  paddle_quiz_participation_form_step_callback($form, $form_state, 'submit');

  // Rebuild the form.
  $form_state['rebuild'] = TRUE;
}

/**
 * Returns ajax info for buttons.
 *
 * @return array
 *   #ajax info to use on buttons.
 */
function paddle_quiz_participation_form_ajax_info() {
  return array(
    'wrapper' => 'paddle-quiz-form-container',
    'callback' => 'paddle_quiz_participation_form_ajax',
  );
}

/**
 * Does a callback for a specific form step and action.
 *
 * @param array $form
 *   Form array
 * @param array $form_state
 *   Form state array.
 * @param string $action
 *   'validate' or 'submit' to get either one's callback. Optional.
 */
function paddle_quiz_participation_form_step_callback(&$form, &$form_state, $action = '') {
  $step = paddle_quiz_participation_form_steps_current($form_state);

  $callback = 'paddle_quiz_participation_form_screen_' . $step;
  if (!empty($action)) {
    $callback .= '_' . $action;
  }

  // Call the callback for the current step. Note that we use
  // call_user_func_array() instead of call_user_func() so we can pass our
  // arguments by reference.
  if (is_callable($callback)) {
    $parameters = array(&$form, &$form_state);
    call_user_func_array($callback, $parameters);
  }
}

/**
 * Determines the current step of the quiz.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @return string
 *   Step identifier.
 */
function paddle_quiz_participation_form_steps_current($form_state) {
  // Try to get the current step from the ctools object cache.
  $cache = paddle_quiz_participation_form_cache_get($form_state);
  if (is_null($cache)) {
    $quiz = $form_state['paddle_quiz'];
    $step = 'start';
  }
  else {
    $quiz = $cache->quiz;
    $step = !empty($cache->step) ? $cache->step : 'start';
  }

  // Make sure it's a valid step.
  $valid_steps = paddle_quiz_participation_form_steps($quiz);
  if (!in_array($step, $valid_steps)) {
    $step = 'start';
  }

  $info_required = field_get_items('paddle_quiz', $quiz, 'field_paddle_quiz_info_required');
  if ($step == 'info' && !$info_required[0]['value']) {
    $step = paddle_quiz_participation_form_steps_next($quiz, $step);
  }

  return $step;
}

/**
 * Returns all steps for a specific quiz.
 *
 * @param QuizEntity $quiz
 *   Quiz entity.
 *
 * @return string[]
 *   List of step identifiers for the specific quiz.
 */
function paddle_quiz_participation_form_steps(QuizEntity $quiz) {
  $steps = array();
  $steps[] = 'start';
  if ($quiz->getInfoScreenLocation() && $quiz->getInfoScreenLocation() == QuizEntity::INFO_START) {
    $steps[] = 'info';
  }
  $steps[] = 'question';
  if ($quiz->hasTiebreakerQuestion()) {
    $steps[] = 'tiebreaker';
  }
  if ($quiz->getInfoScreenLocation() && $quiz->getInfoScreenLocation() == QuizEntity::INFO_END) {
    $steps[] = 'info';
  }
  $steps[] = 'result';
  return $steps;
}

/**
 * Returns the next step for a specific quiz, given the current step.
 *
 * @param QuizEntity $quiz
 *   Quiz entity.
 * @param string $step
 *   Current step.
 *
 * @return string
 *   Step identifier for the next step, or FALSE if no next step found.
 */
function paddle_quiz_participation_form_steps_next(QuizEntity $quiz, $step) {
  return paddle_quiz_participation_form_steps_new($quiz, $step, 1);
}

/**
 * Returns the previous step for a specific quiz, given the current step.
 *
 * @param QuizEntity $quiz
 *   Quiz entity.
 * @param string $step
 *   Current step.
 *
 * @return string
 *   Step identifier for the previous step, or FALSE if no next step found.
 */
function paddle_quiz_participation_form_steps_previous(QuizEntity $quiz, $step) {
  return paddle_quiz_participation_form_steps_new($quiz, $step, -1);
}

/**
 * Returns the new step for a specific quiz, given current step and direction.
 *
 * @param QuizEntity $quiz
 *   Quiz entity.
 * @param string $step
 *   Current step.
 * @param int $direction
 *   Positive for moving forward, negative for moving backwards.
 *
 * @return string
 *   Step identifier for the new step, or FALSE if no new step found.
 */
function paddle_quiz_participation_form_steps_new(QuizEntity $quiz, $step, $direction) {
  $direction = ($direction >= 0) ? 1 : -1;
  $steps = paddle_quiz_participation_form_steps($quiz);
  $current_step_index = array_search($step, $steps);

  if ($current_step_index !== FALSE) {
    $new_step_index = $current_step_index + $direction;

    if (!isset($steps[$new_step_index])) {
      return FALSE;
    }
    else {
      return $steps[$new_step_index];
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Returns the cache object for the current quiz in progress.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @return QuizParticipationCache
 *   The cache object, or NULL if no cache object exists.
 */
function paddle_quiz_participation_form_cache_get($form_state) {
  // Cache is stored in the form state if we're previewing a quiz. See
  // paddle_quiz_participation_form_cache_set() for more information.
  if (!empty($form_state['preview'])) {
    return !empty($form_state['preview_cache']) ? $form_state['preview_cache'] : NULL;
  }
  else {
    $qid = $form_state['paddle_quiz']->qid;
    ctools_include('object-cache');
    $cache = ctools_object_cache_get('paddle_quiz', $qid);
    return $cache;
  }
}

/**
 * Sets the cache object for the current quiz in progress.
 *
 * @param array $form_state
 *   Form state array.
 * @param QuizParticipationCache $cache
 *   The cache object to store.
 */
function paddle_quiz_participation_form_cache_set(&$form_state, QuizParticipationCache $cache) {
  // If we're previewing a quiz, don't store the cache in the database as it
  // would be confusing for editors that the preview is still in the same
  // "state" after they made changes to the quiz. The whole point of the preview
  // is that it shows the latest state of the quiz, and not that it's cached
  // until the result screen is reached.
  if (!empty($form_state['preview'])) {
    $form_state['preview_cache'] = $cache;
  }
  else {
    $qid = $form_state['paddle_quiz']->qid;
    ctools_include('object-cache');
    ctools_object_cache_set('paddle_quiz', $qid, $cache);
  }
}

/**
 * Clears the cache object for a quiz.
 *
 * @param array $form_state
 *   Form state array.
 */
function paddle_quiz_participation_form_cache_clear($form_state) {
  ctools_include('object-cache');
  ctools_object_cache_clear('paddle_quiz', $form_state['paddle_quiz']->qid);
}

/**
 * Form callback for displaying a screen of a quiz.
 *
 * @param array $form
 *   Form render array to add the screen to.
 * @param string $name
 *   Name of the screen.
 * @param array $elements
 *   Array of form elements to display on the screen.
 * @param array $actions
 *   Array of form elements like submit buttons. Optional.
 * @param string $image
 *   Image to display, as themed by theme_paddle_scald_render_atom(). Optional.
 *
 * @return array
 *   Form element that contains the screen elements and the image.
 */
function paddle_quiz_participation_form_screen(&$form, $name, $elements, $actions = array(), $image = '') {
  // Screen container.
  $form['screen'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'paddle-quiz-screen',
        'paddle-quiz-screen-' . $name,
      ),
      'data-screen' => $name,
    ),
  );

  // Full screen link.
  $full_screen_icon = theme('paddle_core_icon', array('name' => 'arrows-alt'));
  // Add a 'Full screen' text for screen readers.
  $full_screen_icon .= '<span class="visuallyhidden">' . t('Full screen') . '</span>';
  $form['screen']['full_screen'] = array(
    '#type' => 'markup',
    '#markup' => l($full_screen_icon, '#', array(
      'external' => TRUE,
      'html' => TRUE,
      'attributes' => array(
        'class' => array('paddle-quiz-full-screen-open'),
      ),
    )),
  );

  // Exit full screen link.
  $form['screen']['exit_full_screen'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Exit full screen'), '#', array(
      'external' => TRUE,
      'attributes' => array(
        'class' => array('paddle-quiz-full-screen-close'),
      ),
    )),
  );

  // Attach full screen javascript to the form if it hasn't been already.
  $full_screen_js = drupal_get_path('module', 'paddle_quiz') . '/js/full-screen.js';
  $attached_js = !empty($form['#attached']['js']) ? $form['#attached']['js'] : array();
  if (!in_array($full_screen_js, $attached_js)) {
    $form['#attached']['js'][] = $full_screen_js;
  }

  // Display the image if there is one.
  if (!empty($image)) {
    $form['screen']['#attributes']['class'][] = 'has-image';

    $form['screen']['image'] = array(
      '#type' => 'markup',
      '#markup' => $image,
      '#prefix' => '<div class="paddle-quiz-image">',
      '#suffix' => '</div>',
    );
  }

  // Screen content container.
  $form['screen']['content'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'paddle-quiz-screen-content',
      ),
    ),
  );

  // Add all the screen elements to the screen content container.
  foreach ($elements as $key => $element) {
    $form['screen']['content'][$key] = $element;
  }

  if (!empty($actions)) {
    // Actions container.
    $form['screen']['content']['actions'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'paddle-quiz-screen-actions',
        ),
        'role' => array(
          'application',
        ),
      ),
    );

    // Add all actions to the actions container.
    foreach ($actions as $key => $action) {
      $form['screen']['content']['actions'][$key] = $action;
    }
  }
}

/**
 * Form callback for the start screen.
 */
function paddle_quiz_participation_form_screen_start(&$form, &$form_state) {
  /* @var \QuizEntity $quiz */
  $quiz = $form_state['paddle_quiz'];
  $elements = array();
  $actions = array();

  // Get the start screen image if there is one.
  $image = '';
  if (!empty($quiz->field_paddle_quiz_start_image[LANGUAGE_NONE][0]['sid'])) {
    $sid = $quiz->field_paddle_quiz_start_image[LANGUAGE_NONE][0]['sid'];
    $image_style = $quiz->field_paddle_quiz_start_image[LANGUAGE_NONE][0]['style'];
    $atom = scald_atom_load($sid);
    $image = theme('paddle_scald_render_atom', array('atom' => $atom, 'image_style' => $image_style));
  }

  // The title is either the quiz title, or a specific title for the start
  // screen.
  $title = check_plain($quiz->title);
  if (!empty($quiz->field_paddle_quiz_start_title[LANGUAGE_NONE][0]['safe_value'])) {
    $title = $quiz->field_paddle_quiz_start_title[LANGUAGE_NONE][0]['safe_value'];
  }
  $elements['title'] = array(
    '#type' => 'markup',
    '#markup' => $title,
    '#prefix' => '<h3 class="paddle-quiz-title">',
    '#suffix' => '</h3>',
  );

  // Show the subtitle if there is any.
  if (!empty($quiz->field_paddle_quiz_subtitle[LANGUAGE_NONE][0]['safe_value'])) {
    $subtitle = $quiz->field_paddle_quiz_subtitle[LANGUAGE_NONE][0]['safe_value'];
    $elements['subtitle'] = array(
      '#type' => 'markup',
      '#markup' => $subtitle,
      '#prefix' => '<h4 class="paddle-quiz-subtitle">',
      '#suffix' => '</h4>',
    );
  }

  // Show the start screen message if there is any.
  if (!empty($quiz->field_paddle_quiz_start_message[LANGUAGE_NONE][0]['safe_value'])) {
    $message = $quiz->field_paddle_quiz_start_message[LANGUAGE_NONE][0]['safe_value'];
    $elements['message'] = array(
      '#type' => 'markup',
      '#markup' => $message,
      '#prefix' => '<div class="paddle-quiz-message">',
      '#suffix' => '</div>',
    );
  }

  // Start button.
  $start_button_label = t('Start');
  if (!empty($quiz->field_paddle_quiz_start_button[LANGUAGE_NONE][0]['safe_value'])) {
    $start_button_label = $quiz->field_paddle_quiz_start_button[LANGUAGE_NONE][0]['safe_value'];
  }
  $actions['start'] = array(
    '#type' => 'submit',
    '#value' => $start_button_label,
    '#ajax' => paddle_quiz_participation_form_ajax_info(),
    '#attributes' => array('class' => array('next-screen')),
  );

  // Add the disclaimer if there is one, and a link to open it.
  if ($quiz->hasDisclaimer()) {
    // Add the necessary JS.
    $form['#attached']['js'][] = drupal_get_path('module', 'paddle_quiz') . '/js/disclaimer.js';

    // Disclaimer link.
    $disclaimer_title = t('Contest rules / disclaimer');
    $elements['disclaimer_link'] = array(
      '#type' => 'markup',
      '#markup' => l($disclaimer_title, '#', array(
        'external' => TRUE,
        'attributes' => array(
          'class' => array('paddle-quiz-disclaimer-link'),
        ),
      )),
    );

    // Disclaimer.
    $elements['disclaimer'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'paddle-quiz-disclaimer',
          'paddle-quiz-disclaimer-hidden',
        ),
      ),
    );
    $close_icon = theme('paddle_core_icon', array('name' => 'times'));
    $close_link = l($close_icon, '#', array(
      'external' => TRUE,
      'html' => TRUE,
      'attributes' => array(
        'class' => array('paddle-quiz-disclaimer-close'),
      ),
    ));
    $elements['disclaimer']['title'] = array(
      '#type' => 'markup',
      '#markup' => $disclaimer_title . $close_link,
      '#prefix' => '<h3 class="paddle-quiz-disclaimer-title">',
      '#suffix' => '</h3>',
    );
    $elements['disclaimer']['message'] = array(
      '#type' => 'markup',
      '#markup' => $quiz->field_paddle_quiz_disclaimer[LANGUAGE_NONE][0]['safe_value'],
      '#prefix' => '<div class="paddle-quiz-disclaimer-message">',
      '#suffix' => '</div>',
    );
    $elements['disclaimer']['close_button'] = array(
      '#type' => 'submit',
      '#value' => t('Close'),
      '#attributes' => array(
        'class' => array('paddle-quiz-disclaimer-close'),
      ),
    );
  }

  // Put everything together.
  paddle_quiz_participation_form_screen($form, 'start', $elements, $actions, $image);

  // Change the weight of the actions container and the disclaimer link so the
  // disclaimer link is at the very bottom of the screen.
  $form['screen']['content']['actions']['#weight'] = 50;
  $form['screen']['content']['disclaimer_link']['#weight'] = 100;
}

/**
 * Submit callback for the start screen.
 */
function paddle_quiz_participation_form_screen_start_submit(&$form, &$form_state) {
  $quiz = $form_state['paddle_quiz'];

  // From now on we'll be storing the quiz entity in a cache object, so the user
  // can continue the quiz where he left off when he leaves the page and comes
  // back, even if the quiz entity has been updated in the meantime and
  // questions have been added/removed/changed. We don't do this earlier because
  // it would be overkill to create a cache object every time someone visits the
  // page but doesn't click the start button.
  $cache = new QuizParticipationCache($quiz);

  // Also set the next step, which is either the first question, or the user
  // info screen.
  $cache->step = paddle_quiz_participation_form_steps_next($quiz, 'start');

  // Store the cache object. Note that this is done per session id, so multiple
  // sessions do not conflict with each other.
  paddle_quiz_participation_form_cache_set($form_state, $cache);
}

/**
 * Form callback for the info screen.
 */
function paddle_quiz_participation_form_screen_info(&$form, &$form_state) {
  $cache = paddle_quiz_participation_form_cache_get($form_state);
  $quiz = $cache->quiz;

  $elements = array();
  $actions = array();

  $elements['title'] = array(
    '#type' => 'markup',
    '#markup' => $quiz->field_paddle_quiz_info_title[LANGUAGE_NONE][0]['safe_value'],
    '#prefix' => '<h3 class="paddle-quiz-title">',
    '#suffix' => '</h3>',
  );

  if (!empty($quiz->field_paddle_quiz_info_message[LANGUAGE_NONE][0]['safe_value'])) {
    $message = $quiz->field_paddle_quiz_info_message[LANGUAGE_NONE][0]['safe_value'];
    $elements['message'] = array(
      '#type' => 'markup',
      '#markup' => $message,
      '#prefix' => '<div class="paddle-quiz-message">',
      '#suffix' => '</div>',
    );
  }

  $elements['info'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('paddle-quiz-user-info'),
    ),
  );

  if ($quiz->field_paddle_quiz_info_user[LANGUAGE_NONE][0]['value'] == 'name_email') {
    $default_name = isset($form_state['values']['name']) ? $form_state['values']['name'] : $cache->name;
    $elements['info']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Your name'),
      '#required' => TRUE,
      '#default_value' => $default_name,
    );
  }

  $default_email = isset($form_state['values']['email']) ? $form_state['values']['email'] : $cache->email;
  $elements['info']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Your e-mail address'),
    '#required' => TRUE,
    '#default_value' => $default_email,
  );

  $continue_button_label = $quiz->field_paddle_quiz_info_button_l[LANGUAGE_NONE][0]['safe_value'];
  $actions['continue'] = array(
    '#type' => 'submit',
    '#value' => $continue_button_label,
    '#ajax' => paddle_quiz_participation_form_ajax_info(),
    '#attributes' => array('class' => array('next-screen')),
  );

  paddle_quiz_participation_form_screen($form, 'info', $elements, $actions);
}

/**
 * Validation callback for the info screen.
 */
function paddle_quiz_participation_form_screen_info_validate(&$form, &$form_state) {
  if (!empty($form_state['values']['email']) && !valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('The e-mail address you entered is not valid.'));
  }
}

/**
 * Submit callback for the info screen.
 */
function paddle_quiz_participation_form_screen_info_submit(&$form, &$form_state) {
  $cache = paddle_quiz_participation_form_cache_get($form_state);
  $quiz = $cache->quiz;

  // Update the name and email in the cache object.
  $cache->name = !empty($form_state['values']['name']) ? $form_state['values']['name'] : '';
  $cache->email = $form_state['values']['email'];

  // Determine the next step. This is either the first question, or the result
  // screen.
  $cache->step = paddle_quiz_participation_form_steps_next($quiz, 'info');

  // Save the cache object.
  paddle_quiz_participation_form_cache_set($form_state, $cache);
}

/**
 * Form callback for the question screens.
 */
function paddle_quiz_participation_form_screen_question(&$form, &$form_state) {
  $cache = paddle_quiz_participation_form_cache_get($form_state);
  $quiz = $cache->quiz;

  // As soon as the user reaches the first question the start time should be
  // stored.
  if (empty($cache->start)) {
    $cache->start = time();
    paddle_quiz_participation_form_cache_set($form_state, $cache);
  }

  // Initialize the variables that we'll need to generate the screen.
  $elements = array();
  $actions = array();
  $image = '';

  // Get the question (field collection item) entity from the quiz entity.
  $question_entity = $quiz->field_paddle_quiz_questions[LANGUAGE_NONE][$cache->question];

  // Set the image (if there is any).
  if (!empty($question_entity->field_paddle_quiz_question_image[LANGUAGE_NONE][0]['sid'])) {
    $sid = $question_entity->field_paddle_quiz_question_image[LANGUAGE_NONE][0]['sid'];
    $image_style = $question_entity->field_paddle_quiz_question_image[LANGUAGE_NONE][0]['style'];
    $atom = scald_atom_load($sid);
    $image = theme('paddle_scald_render_atom', array('atom' => $atom, 'image_style' => $image_style));
  }

  // Add the quiz title.
  $elements['title'] = array(
    '#type' => 'markup',
    '#markup' => check_plain($quiz->title),
    '#prefix' => '<h3 class="paddle-quiz-title">',
    '#suffix' => '</h3>',
  );

  // Add the subtitle, which indicates on which question the user is.
  $question_no = $cache->question + 1;
  $max_no = count($quiz->field_paddle_quiz_questions[LANGUAGE_NONE]);
  $elements['subtitle'] = array(
    '#type' => 'markup',
    '#markup' => t('Question @question_no of @max_no', array(
      '@question_no' => $question_no,
      '@max_no' => $max_no,
    )),
    '#prefix' => '<h4 class="paddle-quiz-subtitle">',
    '#suffix' => '</h4>',
  );

  // Add the actual question.
  $elements['question'] = array(
    '#type' => 'markup',
    '#markup' => $question_entity->field_paddle_quiz_question[LANGUAGE_NONE][0]['safe_value'],
    '#prefix' => '<p class="paddle-quiz-question">',
    '#suffix' => '</p>',
  );

  // Add the answers as radio buttons. Note that we give the field a name
  // suffixed by the question index to prevent conflicts with other the values
  // of answer fields on other screens when using the next/previous buttons.
  $answer_options = array();
  foreach ($question_entity->field_paddle_quiz_answers[LANGUAGE_NONE] as $index => $answer) {
    $answer_options[$index] = $answer['safe_value'];
  }
  $elements['answer_' . $cache->question] = array(
    '#type' => 'radios',
    '#options' => $answer_options,
    '#title' => t('Answers'),
    '#title_display' => 'invisible',
  );

  // Set the default value for the answers if the user has already answered the
  // question before.
  if (isset($cache->answers[$cache->question])) {
    $elements['answer_' . $cache->question]['#default_value'] = $cache->answers[$cache->question];
  }

  // Add a "previous" button, but only if we're past the first question OR the
  // user info screen is located before the questions (so the user can go back
  // and change their info).
  if ($cache->question > 0 || $quiz->getInfoScreenLocation() == QuizEntity::INFO_START) {
    $actions['previous'] = array(
      '#type' => 'submit',
      '#value' => $quiz->field_paddle_quiz_btn_previous_l[LANGUAGE_NONE][0]['safe_value'],
      '#ajax' => paddle_quiz_participation_form_ajax_info(),
      '#limit_validation_errors' => array(),
      '#submit' => array('paddle_quiz_participation_form_previous'),
      '#attributes' => array('class' => array('previous-screen')),
    );
  }

  // Add a "next" button.
  $actions['next'] = array(
    '#type' => 'submit',
    '#value' => $quiz->field_paddle_quiz_btn_next_l[LANGUAGE_NONE][0]['safe_value'],
    '#ajax' => paddle_quiz_participation_form_ajax_info(),
    '#attributes' => array('class' => array('next-screen')),
  );

  // Generate the screen.
  paddle_quiz_participation_form_screen($form, 'question', $elements, $actions, $image);
}

/**
 * Validate function for the question screens.
 */
function paddle_quiz_participation_form_screen_question_validate(&$form, &$form_state) {
  $cache = paddle_quiz_participation_form_cache_get($form_state);
  if (is_null($form_state['values']['answer_' . $cache->question])) {
    form_set_error('answer', t('Please select an answer before continuing.'));
  }
}

/**
 * Submit function for the question screens.
 */
function paddle_quiz_participation_form_screen_question_submit(&$form, &$form_state) {
  $cache = paddle_quiz_participation_form_cache_get($form_state);
  $quiz = $cache->quiz;

  // Set the answer to the question in the cache object.
  $cache->answers[$cache->question] = $form_state['values']['answer_' . $cache->question];

  // If this isn't the last question, proceed to the next question.
  if ($cache->question + 1 != count($quiz->field_paddle_quiz_questions[LANGUAGE_NONE])) {
    $cache->question++;
  }
  // Otherwise determine the next step, which would either be the tiebreaker
  // question, the info screen, or the result screen.
  else {
    $cache->step = paddle_quiz_participation_form_steps_next($quiz, 'question');

    // Set the end time of the quiz. If the user still has a tiebreaker question
    // to answer, it will overwrite the end time at that point.
    $cache->end = time();
  }

  // Save the cache object.
  paddle_quiz_participation_form_cache_set($form_state, $cache);
}

/**
 * Form callback for the tiebreaker screen.
 */
function paddle_quiz_participation_form_screen_tiebreaker(&$form, &$form_state) {
  $cache = paddle_quiz_participation_form_cache_get($form_state);
  $quiz = $cache->quiz;

  $elements = array();
  $actions = array();

  $elements['title'] = array(
    '#type' => 'markup',
    '#markup' => check_plain($quiz->title),
    '#prefix' => '<h3 class="paddle-quiz-title">',
    '#suffix' => '</h3>',
  );
  $elements['subtitle'] = array(
    '#type' => 'markup',
    '#markup' => t('Tiebreaker'),
    '#prefix' => '<h4 class="paddle-quiz-subtitle">',
    '#suffix' => '</h4>',
  );

  $elements['question'] = array(
    '#type' => 'markup',
    '#markup' => $quiz->field_paddle_quiz_tiebreaker_q[LANGUAGE_NONE][0]['safe_value'],
    '#prefix' => '<div class="paddle-quiz-question">',
    '#suffix' => '</div>',
  );
  $elements['answer_tiebreaker'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => $cache->tiebreaker,
    '#title' => t('Answer'),
    '#title_display' => 'invisible',
    '#prefix' => '<div class="paddle-quiz-tiebreaker-answer">',
    '#suffix' => '</div>',
    '#field_suffix' => $quiz->field_paddle_quiz_tiebreaker_l[LANGUAGE_NONE][0]['safe_value'],
  );

  $actions['previous'] = array(
    '#type' => 'submit',
    '#value' => $quiz->field_paddle_quiz_btn_previous_l[LANGUAGE_NONE][0]['safe_value'],
    '#ajax' => paddle_quiz_participation_form_ajax_info(),
    '#limit_validation_errors' => array(),
    '#submit' => array('paddle_quiz_participation_form_previous'),
    '#attributes' => array('class' => array('previous-screen')),
  );
  $actions['next'] = array(
    '#type' => 'submit',
    '#value' => $quiz->field_paddle_quiz_btn_next_l[LANGUAGE_NONE][0]['safe_value'],
    '#ajax' => paddle_quiz_participation_form_ajax_info(),
    '#attributes' => array('class' => array('next-screen')),
  );

  paddle_quiz_participation_form_screen($form, 'tiebreaker', $elements, $actions);
}

/**
 * Submit function for the tiebreaker screen.
 */
function paddle_quiz_participation_form_screen_tiebreaker_submit(&$form, &$form_state) {
  $cache = paddle_quiz_participation_form_cache_get($form_state);
  $quiz = $cache->quiz;

  $answer = $form_state['values']['answer_tiebreaker'];
  $cache->tiebreaker = $answer;
  $cache->step = paddle_quiz_participation_form_steps_next($quiz, 'tiebreaker');

  // Overwrite the end time of the quiz, as the tiebreaker also counts as a
  // question.
  $cache->end = time();

  paddle_quiz_participation_form_cache_set($form_state, $cache);
}

/**
 * Form callback for the result screen.
 */
function paddle_quiz_participation_form_screen_result(&$form, &$form_state) {
  $cache = paddle_quiz_participation_form_cache_get($form_state);
  $quiz = $cache->quiz;

  $elements = array();
  $elements['title'] = array(
    '#type' => 'markup',
    '#markup' => check_plain($quiz->title),
    '#prefix' => '<h3 class="paddle-quiz-title">',
    '#suffix' => '</h3>',
  );
  $elements['subtitle'] = array(
    '#type' => 'markup',
    '#markup' => $quiz->field_paddle_quiz_result_title[LANGUAGE_NONE][0]['safe_value'],
    '#prefix' => '<h4 class="paddle-quiz-subtitle">',
    '#suffix' => '</h4>',
  );

  // Calculate the score of the multiple choice questions.
  $score = $quiz->getScorePercentage($cache->answers);

  $elements['score'] = array(
    '#type' => 'markup',
    '#markup' => $score . '%',
    '#prefix' => '<div class="paddle-quiz-result-score">',
    '#suffix' => '</div>',
  );

  $elements['message'] = array(
    '#type' => 'markup',
    '#markup' => $quiz->field_paddle_quiz_result_message[LANGUAGE_NONE][0]['safe_value'],
    '#prefix' => '<div class="paddle-quiz-result-message">',
    '#suffix' => '</div>',
  );

  paddle_quiz_participation_form_screen($form, 'result', $elements);
  paddle_quiz_participation_finalize($form_state);
}

/**
 * Stores the quiz's results in the database and deletes the cache object.
 *
 * @param array $form_state
 *   Form state array.
 */
function paddle_quiz_participation_finalize($form_state) {
  $cache = paddle_quiz_participation_form_cache_get($form_state);

  // Store the participation permanently in the database, unless we're
  // previewing a quiz.
  if (empty($form_state['preview'])) {
    $quiz = $cache->quiz;
    $quiz->storeParticipation($cache);
  }

  // Delete the cache object.
  paddle_quiz_participation_form_cache_clear($form_state);
}

/**
 * Submit function for "previous" buttons on the various screens.
 */
function paddle_quiz_participation_form_previous($form, &$form_state) {
  $cache = paddle_quiz_participation_form_cache_get($form_state);
  $quiz = $cache->quiz;

  // When we're on a question screen, and it's not the first question, simply
  // go one question back.
  if ($cache->step == 'question' && $cache->question > 0) {
    // If we're past the 1st question, go one question back.
    if ($cache->question > 0) {
      $cache->question--;
    }
  }
  // Otherwise go a step back.
  else {
    $cache->step = paddle_quiz_participation_form_steps_previous($quiz, $cache->step);
  }

  // Save the cache object.
  paddle_quiz_participation_form_cache_set($form_state, $cache);

  // Rebuild the form. (We need to do this manually here as
  // paddle_quiz_participation_form_submit() is not triggered when clicking the
  // "previous" button.
  $form_state['rebuild'] = TRUE;
}
