<?php

/**
 * @file
 * Code for the Paddle webform Post module.
 */

/**
 * Implements hook_webform_submission_insert().
 */
function paddle_webform_post_webform_submission_insert($node, $submission) {
  // Skip draft forms.
  if ($submission->is_draft) {
    return;
  }
  // For ticket KANWEBS-5955 we need to send a POST request after the submission
  // of a certain webform.
  $webform_nid = variable_get('paddle_webform_post_taaltelefoon_webform_nid', '');

  if (!empty($webform_nid) && $node->nid == $webform_nid) {
    paddle_webform_post_send_message_to_taaltelefoon_webservice($node, $submission);
  }
}

/**
 * Send a post message to the taaltelefoon webservice.
 *
 * @param object $node
 *   The node which the webform is connection to.
 * @param object $submission
 *   The details of the webform submission.
 */
function paddle_webform_post_send_message_to_taaltelefoon_webservice($node, $submission) {
  // We require to retrieve the components to figure out the cid of each
  // webform component.
  $webform_components = $node->webform['components'];
  // The component values can be retrieved from the submission data.
  // in an array keyed by the cid.
  $submission_data = $submission->data;

  $post_data = paddle_webform_post_retrieve_taaltelefoon_form_values($webform_components,
    $submission_data);

  // Add the ID of the submission as well. We concatenate a time stamp, such
  // that the retrieved value will always be unique for the web service.
  $time_stamp = time();
  $post_data['id'] = $submission->sid . $time_stamp;

  $post_data_json = json_encode($post_data);

  $drupal_http_request_options = array(
    'method' => 'POST',
    'data' => $post_data_json,
    'timeout' => 15,
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => '*/*',
    ),
  );

  $post_domain = variable_get('paddle_webform_post_taaltelefoon_post_domain', '');
  $post_path = variable_get('paddle_webform_post_taaltelefoon_post_path', '');
  $username = variable_get('paddle_webform_post_taaltelefoon_username', '');
  $password = variable_get('paddle_webform_post_taaltelefoon_pwd', '');
  $request_url = 'https://' . $username . ':' . $password . '@' . $post_domain . $post_path;
  $request = drupal_http_request($request_url, $drupal_http_request_options);

  // Log any errors.
  if (isset($request->code) && isset($request->error)) {
    watchdog(
      'paddle_webform_post',
      'A remote POST request being sent to %url by webform node ID %id triggered an error with code %code, and message %error.',
      array(
        '%id'   => $node->nid,
        '%url'  => $request_url,
        '%code' => $request->code,
        '%error' => $request->error,
      ),
      WATCHDOG_WARNING);

    $error_data = array(
      'sid' => $submission->sid,
      'nid' => $node->nid,
      'date' => $time_stamp,
      'ip' => webform_ip_address($node),
      'url' => $request_url,
      'code' => $request->code,
      'error_message' => $request->error,
    );

    paddle_webform_post_send_mail($post_data, $error_data);
  }
}

/**
 * Retrieves the POST values of the taaltelefoon web form submission.
 *
 * @param array $webform_components
 *   The fields of the webform.
 * @param array $submission_data
 *   The submitted data of the webform.
 *
 * @return array
 *   The POST values which we will need to send to an external web service.
 */
function paddle_webform_post_retrieve_taaltelefoon_form_values($webform_components, $submission_data) {
  $post_data = array();

  foreach ($webform_components as $component_id => $webform_component) {
    $component_data = '';

    if (!empty($submission_data[$component_id][0])) {
      $component_data = $submission_data[$component_id][0];
    }

    switch ($webform_component['form_key']) {
      case 'voornaam':
        $post_data['voornaam'] = $component_data;
        break;

      case 'achternaam':
        $post_data['achternaam'] = $component_data;
        break;

      case 'e_mailadres':
        $post_data['email'] = $component_data;
        break;

      case 'telefoonnummer':
        $post_data['telefoon'] = $component_data;
        break;

      case 'organisatie':
        $post_data['organisatie'] = $component_data;
        break;

      case 'uw_bericht':
        $post_data['bericht'] = $component_data;
    }
  }

  return $post_data;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function paddle_webform_post_form_paddle_formbuilder_configure_webform_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];

  if (!empty($node) && $node->nid == variable_get('paddle_webform_post_taaltelefoon_webform_nid', '')) {
    $form['webform_post'] = array(
      '#type' => 'fieldset',
      '#title' => t('Additional submission actions'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 15,
    );

    $form['webform_post']['additional_submission_actions_mailing_list'] = array(
      '#type' => 'textfield',
      '#title' => t('Mailing list'),
      '#default_value' => variable_get('paddle_webform_post_mailing_list', ''),
      '#description' => t('List of E-mails which a message should be sent to when the additional action goes wrong. The list items should be separated by a ";"'),
      '#size' => 125,
    );

    $form['webform_post']['additional_submission_actions_message'] = array(
      '#type' => 'text_format',
      '#title' => t('Message'),
      '#description' => t('Message which will be sent to when the additional action goes wrong. Supports Webform token replacements.') . ' ' . theme('webform_token_help', array('groups' => array('paddle_webform_post'))),
      '#default_value' => variable_get('paddle_webform_post_message', t('<p>Dear Sir or Madam,</p><p>Something went wrong while performing the additional action on a webform submission.</p>')),
      '#cols' => 40,
      '#rows' => 10,
      '#format' => $node->webform['confirmation_format'],
      '#parents' => array('additional_submission_actions_message'),
      '#states' => array(
        'required' => array(
          ':input[name="additional_submission_actions_mailing_list"]' => array('filled' => TRUE),
        ),
      ),
    );

    $form['webform_post']['additional_submission_actions_message']['better_formats'] = array(
      '#show_selection' => FALSE,
      '#show_tips' => FALSE,
      '#show_tips_link' => FALSE,
    );

    $form['#validate'][] = 'paddle_webform_post_form_paddle_formbuilder_configure_webform_validate';
    $form['#submit'][] = 'paddle_webform_post_form_paddle_formbuilder_configure_webform_submit';
  }
}

/**
 * Validation on the mailing list of the additional submission action settings.
 */
function paddle_webform_post_form_paddle_formbuilder_configure_webform_validate(&$form, &$form_state) {
  if (!empty($form_state['values']['additional_submission_actions_mailing_list'])) {
    $mailing_list = $form_state['values']['additional_submission_actions_mailing_list'];
    $mailing_array = explode(";", $mailing_list);

    foreach ($mailing_array as $email) {
      if (!valid_email_address(trim($email))) {
        form_set_error('additional_submission_actions_mailing_list', t('@email is not a valid e-mail address', array('@email' => $email)));
      }
    }
  }
}

/**
 * Submit handler which takes care of the additional submission action settings.
 */
function paddle_webform_post_form_paddle_formbuilder_configure_webform_submit(&$form, &$form_state) {
  if (!empty($form_state['values']['additional_submission_actions_mailing_list'])) {
    variable_set('paddle_webform_post_mailing_list', $form_state['values']['additional_submission_actions_mailing_list']);
  }

  if (!empty($form_state['values']['additional_submission_actions_message'])) {
    variable_set('paddle_webform_post_message', $form_state['values']['additional_submission_actions_message']['value']);
  }
}

/**
 * Sends an e-mail when the additional webform action has failed.
 *
 * @param array $post_data
 *   The data which has been filled in the webform.
 * @param array $error_data
 *   Extra data which can be relevant to determine the issues.
 */
function paddle_webform_post_send_mail($post_data, $error_data) {
  $mailing_list = variable_get('paddle_webform_post_mailing_list', '');

  if (!empty($mailing_list)) {
    $params['subject'] = t('[Error] - A webform submission has not been posted to the web service');
    $message = token_replace(variable_get('paddle_webform_post_message', ''), array('post_data' => $post_data, 'error_data' => $error_data));
    $params['message'] = check_markup($message, 'full_html');
    // We want HTML to be recognized.
    $params['headers'] = array(
      'MIME-Version' => '1.0',
      'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
      'Content-Transfer-Encoding' => '8Bit',
      'X-Mailer' => 'Drupal',
    );

    $params['plaintext'] = NULL;
    $params['plain'] = FALSE;

    $mailing_array = explode(";", $mailing_list);
    foreach ($mailing_array as $email) {
      drupal_mail('paddle_webform_post', 'paddle_webform_post', $email, language_default(), $params, variable_get('site_mail'));
    }
  }
}

/**
 * Implements hook_mail().
 */
function paddle_webform_post_mail($key, &$message, $params) {
  switch ($key) {
    case 'paddle_webform_post':
      $message['headers'] = array_merge($message['headers'], $params['headers']);
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_webform_webform_submission_actions().
 */
function paddle_webform_post_webform_submission_actions($node, $submission) {
  $actions = array();
  $webform_nid = variable_get('paddle_webform_post_taaltelefoon_webform_nid', '');

  if (webform_results_access($node) && count($node->webform['emails']) && !empty($webform_nid) && $node->nid == $webform_nid) {
    $actions['send_to_webservice'] = array(
      'title' => t('Resend the data to the webservice'),
      'href' => 'node/' . $node->nid . '/submission/' . $submission->sid . '/resend-to-webservice',
    );
  }

  return $actions;
}

/**
 * Implements hook_menu().
 */
function paddle_webform_post_menu() {
  $items['node/%webform_menu/submission/%webform_menu_submission/resend-to-webservice'] = array(
    'title' => 'Resend the data to the webservice',
    'load arguments' => array(1),
    'page callback' => 'paddle_webform_post_resend_to_webservice',
    'page arguments' => array(1, 3),
    'access callback' => 'webform_results_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Resend the request to the web service from our submission data.
 */
function paddle_webform_post_resend_to_webservice($node, $submission) {
  paddle_webform_post_send_message_to_taaltelefoon_webservice($node, $submission);
  drupal_set_message(t('Your submission has been sent to the web service'), 'notice');
  drupal_goto('node/' . $node->nid . '/submission/' . $submission->sid);
}
