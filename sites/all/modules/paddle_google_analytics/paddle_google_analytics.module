<?php
/**
 * @file
 * Code for the Paddle Google Analytics App.
 */

include_once 'paddle_google_analytics.features.inc';

/**
 * Implements hook_apps_app_info().
 */
function paddle_google_analytics_apps_app_info() {
  return array(
    'configure form' => 'paddle_google_analytics_settings_form',
  );
}

/**
 * Form callback displaying Google Analytics settings.
 */
function paddle_google_analytics_settings_form() {
  $form = array();

  $params = array(
    '@analytics' => 'http://www.google.com/analytics/',
    '@webpropertyid' => url('https://developers.google.com/analytics/resources/concepts/gaConceptsAccounts', array('fragment' => 'webProperty')),
  );

  $form['googleanalytics_account'] = array(
    '#title' => t('Web Property ID'),
    '#type' => 'textfield',
    '#default_value' => variable_get('googleanalytics_account', 'UA-'),
    '#size' => 15,
    '#maxlength' => 20,
    '#description' => t('This ID is unique to each site you want to track separately, and is in the form of UA-xxxxxxx-yy. To get a Web Property ID, <a href="@analytics">register your site with Google Analytics</a>, or if you already have registered your site, go to your Google Analytics Settings page to see the ID next to every site profile. <a href="@webpropertyid">Find more information in the documentation</a>.', $params),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_googleanalytics_get_page_search_info_alter().
 */
function paddle_google_analytics_googleanalytics_get_page_search_info_alter(&$search_page) {
  $item = menu_get_item();
  $page_callback = $item['page_callback'];
  $page_arguments = $item['page_arguments'];

  // If the page callback is provided by pm_existings_pages, revert the
  // callback and arguments to original ones.
  if (module_exists('pm_existing_pages')) {
    if ('pm_existing_pages_pm_existing_pages_page' == $page_callback && !empty($page_arguments[1]['pc'])) {
      $page_callback = $page_arguments[1]['pc'];
      // Remove the second argument element as it contains info about the
      // original menu item callback.
      unset($page_arguments[1]);
      // Bring our keys back in place.
      $page_arguments[1] = $page_arguments[2];
    }
  }

  // Provide support for search_api_page pages.
  if (module_exists('search_api_page')) {
    if ('search_api_page_view' == $page_callback && !empty($page_arguments[1])) {
      $search_page['path'] = $item['path'];
      $search_page['keys'] = $page_arguments[1];
    }
  }
}

/**
 * Implements hook_preprocess_search_api_page_results().
 */
function paddle_google_analytics_preprocess_search_api_page_results(&$variables) {
  // Push the search result count to the page.
  googleanalytics_add_search_results_js(intval($variables['results']['result count']));
}

/**
 * Implements hook_is_configured().
 */
function paddle_google_analytics_is_configured() {
  $conf = variable_get('googleanalytics_account', 'UA-');
  return $conf === 'UA-' ? FALSE : TRUE;
}
