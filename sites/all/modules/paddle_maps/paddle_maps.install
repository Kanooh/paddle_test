<?php

/**
 * @file
 * Install, uninstall, update and schema hooks for the Advanced Search app.
 */

/**
 * Implements hook_enable().
 */
function paddle_maps_enable() {
  // Flush the entity caches, allowing the search index to be altered.
  entity_flush_caches();

  paddle_apps_prepare_module_for_permissions('paddle_maps');

  // We need to clear the ctools plugin cache so our new content type plugin
  // gets picked up before we try to assign the permissions related to it.
  ctools_modules_enabled(array('paddle_maps'));

  $permissions = array(
    'create paddle_maps_page content',
    'edit any paddle_maps_page content',
    'delete any paddle_maps_page content',
    'edit maps_search content in landing pages',
  );

  foreach (array('Chief Editor', 'Editor') as $role_name) {
    $role = user_role_load_by_name($role_name);
    user_role_grant_permissions($role->rid, $permissions);
  }

  paddle_apps_prepare_module_for_permissions('paddle_maps');

  $panelizer_permissions = array(
    'administer panelizer node paddle_maps_page layout',
    'administer panelizer node paddle_maps_page content',
  );

  foreach (array('Chief Editor', 'Editor') as $role_name) {
    $role = user_role_load_by_name($role_name);
    user_role_grant_permissions($role->rid, $panelizer_permissions);
  }
  // Turn of the killSwitch.
  variable_set('geocoder_field_killswitch', 0);

  // Default settings for content index fields.
  $default = array();
  $supported_types = array();
  // Allow content types to be added.
  drupal_alter('paddle_maps_supported_content_types', $supported_types);
  foreach ($supported_types as $supported_type) {
    $default[$supported_type] = FALSE;
  }
  variable_set('paddle_maps_index_contenttype_fields', serialize($default));

  // Check for content-type and add the indexfields.
  paddle_maps_add_index_fields();

  $markerdirs = variable_get(
    'gmap_markerfiles',
    array(
      drupal_get_path('module', 'gmap') . '/markers',
      'sites/default/files/paddle_map_markers',
      drupal_get_path('module', 'paddle_maps') . '/markers',
    )
  );

  variable_set('gmap_markerfiles', $markerdirs);
  gmap_regenerate_markers();
  _drupal_flush_css_js();
  registry_rebuild();
  drupal_clear_css_cache();
  drupal_clear_js_cache();
}

/**
 * Implements hook_disable().
 */
function paddle_maps_disable() {
  // Flush the entity caches, allowing the search index reverted to default.
  entity_flush_caches();
  $result = db_query('SELECT name FROM {variable} WHERE name LIKE :module', array(':module' => 'paddle_maps%'));
  foreach ($result as $item) {
    variable_del($item->name);
  }
}

/**
 * Implements hook_uninstall().
 */
function paddle_maps_uninstall() {
  variable_set('gmap_api_key', '');
  variable_del('gmap_marker_custom_dir');
  variable_set('gmap_markerfiles', array(drupal_get_path('module', 'gmap') . '/markers'));
}

/**
 * Use the gmap API key also for the geocoder and set a minimum delay.
 */
function paddle_maps_update_7001() {
  $gmap_api_key = variable_get('gmap_api_key', '');
  if (!empty($gmap_api_key)) {
    // Also set this key for the geocoder.
    variable_set('geocoder_google_auth_method', GEOCODER_GOOGLE_AUTH_KEY);
    variable_set('geocoder_settings', array('geocoder_apikey_google' => trim($gmap_api_key)));
    variable_set('geocoder_google_delay', 200);
  }
}
