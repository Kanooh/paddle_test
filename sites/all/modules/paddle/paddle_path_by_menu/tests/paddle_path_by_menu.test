<?php

/**
 * @file
 * Functional and unit tests for the Paddle Path by Menu module.
 */

/**
 * Tests if content can be accessed by menu path and has the right active trail.
 */
class PaddlePathByMenuTestCase extends DrupalWebTestCase {

  /**
   * A menu link hierarchy containing many duplicate pages.
   *
   * @var array $hierarchy
   */
  protected $hierarchy = array(
    'a' => array(
      'link_title' => 'a',
      'children' => array(
        'a/c' => array(
          'link_title' => 'c',
        ),
        'a/d' => array(
          'link_title' => 'd',
          'children' => array(
            'a/d/e' => array(
              'link_title' => 'e',
            ),
            'a/d/f' => array(
              'link_title' => 'f',
              'children' => array(
                'a/d/f/c' => array(
                  'link_title' => 'c',
                ),
              ),
            ),
          ),
        ),
      ),
    ),
    'b' => array(
      'link_title' => 'b',
      'children' => array(
        'b/e' => array(
          'link_title' => 'e',
        ),
        'b/a' => array(
          'link_title' => 'a',
          'children' => array(
            'b/a/a' => array(
              'link_title' => 'a',
              'children' => array(
                'b/a/a/b' => array(
                  'link_title' => 'b',
                ),
              ),
            ),
          ),
        ),
      ),
    ),
  );

  /**
   * Provides test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Path by menu',
      'description' => 'Tests that content can be reached by menu path and follows the right active trail.',
      'group' => 'Paddle Path by Menu',
    );
  }

  /**
   * Sets up test environment.
   */
  protected function setUp() {
    parent::setUp(array('i18n_menu', 'paddle_path_by_menu_test', 'path'));

    // Create a test menu.
    $this->createMenu();

    // Create a set of menu links.
    $this->createLinkHierarchy($this->hierarchy);
  }

  /**
   * Tests the paths by menu.
   *
   * This checks that the menu link paths that this module provides lead to the
   * right pages, and follows the active trail set by the menu link.
   */
  public function testLinks() {
    // Recursively test the links in the hierarchy.
    $this->assertLinkHierarchy($this->hierarchy);
  }

  /**
   * Tests multilingual menus.
   *
   * @todo Currently the test only supports the "Fixed Language" multilingual
   *   menus. Add support for the "Translate and localize" strategy.
   */
  public function testMultilingualMenus() {
    // Enable multilingual support for the English menu.
    $menu = menu_load('paddle-path-by-menu-test');
    $menu['language'] = 'en';
    $menu['i18n_mode'] = I18N_MODE_LANGUAGE;
    menu_save($menu);

    // Enable a random language in addition to English.
    include_once DRUPAL_ROOT . '/includes/iso.inc';
    $language_list = _locale_get_predefined_list();
    unset($language_list['en']);
    $langcode = array_rand($language_list);
    locale_add_language($langcode);

    // Create a menu in the random language.
    $menu = array(
      'menu_name' => drupal_strtolower($this->randomName()),
      'title' => $this->randomString(),
      'language' => $langcode,
      'i18n_mode' => I18N_MODE_LANGUAGE,
    );
    $this->createMenu($menu);

    // Create a set of menu links in the random language.
    $defaults = array(
      'language' => $langcode,
      'menu_name' => $menu['menu_name'],
    );
    $this->createLinkHierarchy($this->hierarchy, 0, $defaults);

    // Test the links in English and in the random language.
    $languages = language_list();
    foreach (array('en', $langcode) as $language) {
      variable_set('language_default', $languages[$language]);
      $this->assertLinkHierarchy($this->hierarchy, array('language' => $language));
    }
  }

  /**
   * Tests that the generated paths do not link to conflicting URL aliases.
   */
  public function testUrlAliasConflict() {
    global $language;

    // Choose an item from our menu link hierarchy. We pick 'a/d' as this is
    // pointing to a page that is used only once in the hierarchy.
    $item = $this->hierarchy['a']['children']['a/d'];
    $system_path = 'paddle_path_by_menu_test/' . $item['link_title'] . '/' . $language->language;
    $generated_path = 'a/d';

    // Retrieve the menu link and load it to make sure it is fully translated.
    $menu_link = menu_link_get_preferred($system_path);
    $menu_link = menu_link_load($menu_link['mlid']);

    // Test that the menu link initially points to the path generated by Paddle
    // Path By Menu.
    $this->assertEqual($menu_link['href'], $generated_path, 'The menu link initially points to the generated path.');

    // Create a content type.
    $type = $this->drupalCreateContentType();

    // Create and login user.
    $permissions = array(
      'edit any ' . $type->type . ' content',
      'create ' . $type->type . ' content',
      'administer url aliases',
      'create url aliases',
      'access administration pages',
    );
    $user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($user);

    // Create a node and give it a URL alias that conflicts with our menu item.
    $node = $this->drupalCreateNode(array('type' => $type->type));
    $alias = $menu_link['href'];
    $edit = array('path[alias]' => $alias);
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));

    // Refresh the path lookup table.
    drupal_lookup_path('wipe');

    // Confirm that the alias works.
    $this->drupalGet($alias);
    $this->assertText($node->title, 'The node with the conflicting URL can be loaded.');

    // Refresh the menu item and test that it no longer points to the generated
    // path, but to the actual system path.
    paddle_path_by_menu_reset_static_cache();
    $menu_link = menu_link_load($menu_link['mlid']);
    $this->assertEqual($menu_link['href'], $system_path, 'After creating a conflicting URL the menu link no longer points to the generated path but to the system path.');
  }

  /**
   * Recursively tests a hierarchy of menu links.
   *
   * @param array $hierarchy
   *   An associative array of menu link arrays, keyed by path, with each array
   *   containing the following keys:
   *   - link_title: The title to use for the menu link.
   *   - children: An associative array of menu link arrays, keyed by path.
   * @param array $defaults
   *   Optional default values that were passed to menu_link_save().
   */
  protected function assertLinkHierarchy($hierarchy, $defaults = array()) {
    global $language;

    foreach ($hierarchy as $path => $item) {
      // Request the path.
      $this->drupalGet($path);

      // Check that the title is correct.
      $site_name = variable_get('site_name', 'Drupal');
      $title = format_string('@title | @site_name', array('@title' => $item['link_title'], '@site_name' => $site_name));
      $this->assertTitle($title, format_string('The page title is %title.', array('%title' => $item['link_title'])));

      // Retrieve the langcode from the item or from the defaults. If not found
      // in either, default to the global language.
      $langcode = !empty($item['language']) ? $item['language'] : (!empty($defaults['language']) ? $defaults['language'] : $language->language);

      // Check that the correct language is used.
      $elements = $this->xpath('//div[@id="langcode"]');
      $this->assertEqual((string) current($elements), $langcode, format_string('The language is %langcode.', array('%langcode' => $langcode)));

      // Test child menu items if they exist.
      if (isset($item['children'])) {
        $this->assertLinkHierarchy($item['children'], $defaults);
      }
    }
  }

  /**
   * Recursively creates a hierarchy of menu links.
   *
   * @param array $hierarchy
   *   An associative array of menu link arrays, keyed by path, with each array
   *   containing the following keys:
   *   - link_title: The title to use for the menu link.
   *   - children: An associative array of menu link arrays, keyed by path.
   * @param int $plid
   *   An optional parent link id for the menu link.
   * @param array $defaults
   *   Optional default values to pass to menu_link_save().
   */
  protected function createLinkHierarchy($hierarchy, $plid = NULL, $defaults = array()) {
    global $language;

    foreach ($hierarchy as $item) {
      // Retrieve the langcode from the item or from the defaults. If not found
      // in either, default to the global language.
      $langcode = !empty($item['language']) ? $item['language'] : (!empty($defaults['language']) ? $defaults['language'] : $language->language);

      // Add defaults.
      $item += $defaults;
      $item += array(
        'link_path' => 'paddle_path_by_menu_test/' . $item['link_title'] . '/' . $langcode,
        'plid' => $plid,
        'menu_name' => 'paddle-path-by-menu-test',
        'module' => 'paddle_path_by_menu',
      );
      $mlid = menu_link_save($item);
      if (isset($item['children'])) {
        $this->createLinkHierarchy($item['children'], $mlid, $defaults);
      }
    }
  }

  /**
   * Creates a test menu.
   *
   * @param array $menu
   *   The options of the menu to create, as used by menu_save(). Default values
   *   will be used if this parameter is omitted.
   */
  protected function createMenu($menu = array()) {
    // Add default values.
    $menu += array(
      'menu_name' => 'paddle-path-by-menu-test',
      'title' => 'Paddle Path by Menu test menu',
      'description' => 'Menu used in automated testing of Paddle Path by Menu.',
    );
    menu_save($menu);
  }

}
