<?php

/**
 * @file
 * Tests the implementation of Paddle Style plugins in the Paddle Themer module.
 */

/**
 * Paddle Style plugin implementation tests for Paddle Themer.
 */
class PaddleThemerPluginImplementationTestCase extends PaddleThemerTestCase {

  /**
   * A test theme.
   *
   * @var object $theme
   */
  protected $theme;

  /**
   * Returns the test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Paddle Style plugins',
      'description' => 'Test the implementation of Paddle Style plugins in Paddle Themer.',
      'group' => 'Paddle Themer',
    );
  }

  /**
   * Overrides DrupalWebTestCase::setUp().
   */
  public function setUp() {
    parent::setUp(array('paddle_themer_test'));

    $admin_user = $this->drupalCreateUser(
      array('administer paddle_themer', 'manage paddle_themer')
    );
    $this->drupalLogin($admin_user);

    // Create a test theme.
    $options = array(
      'style' => array(
        'paddle_themer_test' => array(
          'plugin' => 'paddle_themer_test',
          'selector' => '#header h1',
          'allowed_values' => array(
            'css' => TRUE,
            'exec' => TRUE,
          ),
          'default_values' => array(
            'css' => 0,
            'exec' => 1,
          ),
        ),
      ),
    );
    $theme_name = $this->createPaddleTheme($options);
    $this->theme = paddle_themer_load($theme_name);

    // Enable our new Paddle theme.
    variable_set('paddle_theme', $theme_name);
  }

  /**
   * Tests the implementation of Paddle Style plugins in Paddle Themer.
   */
  public function testPaddleStylePluginImplementation() {
    // Load the front page.
    $this->drupalGet('<front>');

    // Verify that both getProperties() and execute() have affected the page.
    $this->assertRaw('getProperties():0/paddle_themer_test', 'The getProperties() method has been executed and was passed the values and context.');
    $this->assertRaw('execute():1/paddle_themer_test', 'The execute() method has been executed and was passed the values and context.');

    // Verify that the CSS generated by getProperties has been added to CTools.
    $filename = $this->getAbsoluteUrlFromUri(ctools_css_retrieve($this->theme->name));
    $this->assertRaw($filename, 'The CTools CSS file has been included in the page.');

    // Verify that the file contains the expected CSS.
    $expected_css = "#header h1 {\n  -paddle-themer-test: 1;\n}";
    $this->assertEqual(file_get_contents($filename), $expected_css, 'The CTools CSS file contains the correct styling.');
  }

  /**
   * Tests the validate and submit handlers of Paddle Style plugins.
   */
  public function testPaddleStylePluginValidateSubmit() {
    // Check both checkboxes. This should trigger a validation error.
    $edit = array(
      'global[main][sections][form_elements][paddle_themer_test][options][css]' => TRUE,
      'global[main][sections][form_elements][paddle_themer_test][options][exec]' => TRUE,
    );
    $this->drupalPost('admin/themes/' . $this->theme->name . '/edit', $edit, t('Submit'));

    // Check if the validation error is shown.
    $this->assertRaw(t('This CSS cannot be rendered.'), 'The validation error has been triggered correctly.');
    $elements = $this->xpath($this->constructFieldXpath('name', 'global[main][sections][form_elements][paddle_themer_test][options][css]'));

    // Check if the invalid form element is highlighted.
    $this->assertEqual(count($elements), 1, 'The CSS checkbox has been found.');
    $element = reset($elements);
    $classes = explode(' ', $element->attributes()->class);
    $this->assertTrue(in_array('error', $classes), 'The CSS checkbox has been highlighted as invalid.');

    // Check that the form submit handler has not run.
    $this->assertNoRaw(t('The form has been submitted.'), 'The submit handler runs when a correct form is submitted.');

    // Submit 'correct' values now.
    $edit = array(
      'global[main][sections][form_elements][paddle_themer_test][options][css]' => FALSE,
      'global[main][sections][form_elements][paddle_themer_test][options][exec]' => TRUE,
    );
    $this->drupalPost('admin/themes/' . $this->theme->name . '/edit', $edit, t('Submit'));

    // Check that the form passes validation.
    $this->assertNoRaw(t('This CSS cannot be rendered.'), 'The validation error is not shown on correct form input.');

    // Check that the submit handler has been executed.
    $this->assertRaw(t('The form has been submitted.'), 'The submit handler runs when a correct form is submitted.');
  }

}
