<?php

/**
 * @file
 * Automated tests for the scheduler_workbench module.
 */

/**
 * Tests the scheduling of content.
 */
class SchedulerWorkbenchTestCase extends DrupalWebTestCase {
  protected $user;
  protected $contentType;

  public static function getInfo() {
    return array(
      'name' => 'Scheduler Workbench integration',
      'description' => 'Tests the integration of Workbench Moderation with the Scheduler module.',
      'group' => 'Workbench Moderation',
    );
  }

  public function setUp() {
    parent::setUp('scheduler_workbench');

    // Create a content type.
    $this->contentType = $this->drupalCreateContentType(array());

    // Create a transition.
    $transition = (object) array(
      'from_name' => 'draft',
      'to_name' => 'published',
      'name' => NULL,
    );
    workbench_moderation_transition_save($transition);

    // Clear static caches so the changes are picked up.
    drupal_static_reset('workbench_moderation_transitions');
    $this->checkPermissions(array(), TRUE);

    // Create an administrator and log in.
    $this->user = $this->drupalCreateUser(array(
      'administer content types',
      'create ' . $this->contentType->type . ' content',
      'edit any ' . $this->contentType->type . ' content',
      'moderate content from draft to published',
      'schedule publishing of nodes',
      'override default scheduler time',
    ));

    $this->drupalLogin($this->user);

    // Configure the content type to use scheduling and moderation through the
    // interface.
    $edit = array(
      'node_options[revision]' => TRUE,
      'node_options[moderation]' => TRUE,
      'scheduler_publish_enable' => TRUE,
      'scheduler_unpublish_enable' => TRUE,
    );
    $this->drupalPost('admin/structure/types/manage/' . $this->contentType->type, $edit, t('Save content type'));
    node_types_rebuild();
  }

  // Test publishing and unpublishing of content.
  public function testPublishing() {
    // Define some combinations of publishing / unpublishing dates with an
    // initial publication state and expected publication status and moderation
    // state after scheduling.
    $testcases = array(
      array(
        'description' => 'A published node with unpublication date in the past',
        'publish_on' => 0,
        'unpublish_on' => strtotime('-1 day'),
        'status' => TRUE,
        'expected_status' => FALSE,
        'expected_state' => 'draft',
      ),
      array(
        'description' => 'An unpublished node with publication date in the past and unpublication date in the future',
        'publish_on' => strtotime('-1 day'),
        'unpublish_on' => strtotime('+1 day'),
        'status' => FALSE,
        'expected_status' => TRUE,
        'expected_state' => 'published',
      ),
      array(
        'description' => 'A published node with both dates in the future',
        'publish_on' => strtotime('+1 day'),
        'unpublish_on' => strtotime('+2 day'),
        'status' => TRUE,
        'expected_status' => FALSE,
        'expected_state' => 'draft',
      ),
    );

    // Test each case.
    foreach ($testcases as $testcase) {
      // Create a node with the settings as defined in the test case.
      $settings = $testcase + array('type' => $this->contentType->type);
      $node = $this->drupalCreateNode($settings);

      // Simulate a cron run.
      scheduler_cron();

      // Retrieve the current publication status of the node and check if it
      // matches the expected result.
      $current_status = $this->getPublicationStatus($node->nid);
      $this->assertEqual($testcase['expected_status'], $current_status, format_string('@description has its publication state set to %status after scheduling.' , array('@description' => $testcase['description'], '%status' => $testcase['expected_status'] ? 'TRUE' : 'FALSE')));

      // Retrieve the current moderation state of the node and check if it
      // matches the expected result.
      $current_state = $this->getModerationState($node->nid);
      $this->assertEqual($testcase['expected_state'], $current_state, format_string('@description has its moderation state set to %state after scheduling', array('@description' => $testcase['description'], '%state' => $testcase['expected_state'])));
    }
  }

  // Test publishing of approved nodes.
  public function testApprovedContent() {
    // Create an 'Approved' moderation state.
    $state = (object) array(
      'name' => 'approved',
      'label' => 'Approved',
      'description' => '',
      'weight' => -50,
    );
    workbench_moderation_state_save($state);
    drupal_static_reset('workbench_moderation_states');

    // Set the 'approved' state for our content type.
    variable_set('scheduler_publish_allow_state_' . $this->contentType->type, 'approved');

    // Create two nodes: one in state 'draft' and one in state 'approved', both
    // having a publication date in the past so they are ready to be scheduled.
    $settings = array(
      'status' => 0,
      'publish_on' => strtotime('-1 day'),
      'type' => $this->contentType->type,
    );
    $node_draft = $this->drupalCreateNode($settings + array('workbench_moderation_state_new' => 'draft'));
    $node_approved = $this->drupalCreateNode($settings + array('workbench_moderation_state_new' => 'approved'));

    // Simulate a cron run.
    scheduler_cron();

    // Check that the "Draft" node is still in draft and unpublished.
    $this->assertFalse($this->getPublicationStatus($node_draft->nid), 'A node which is not approved is not published when scheduled.');
    $this->assertEqual($this->getModerationState($node_draft->nid), 'draft', 'A node which is not approved remains in the same state when scheduled.');

    // Check that the "Approved" node has had its moderation state updated and
    // has been published.
    $this->assertTrue($this->getPublicationStatus($node_approved->nid), 'A node which is approved is published when scheduled.');
    $this->assertEqual($this->getModerationState($node_approved->nid), 'published', 'A node which is approved changes to the "Published" moderation state when scheduled.');

    // Allow the instant publishing of nodes with a past publication date.
    variable_set('scheduler_publish_past_date_' . $this->contentType->type, 'publish');

    // Check that the "Draft" node can be moderated to published state manually.
    $edit = array('workbench_moderation_state_new' => 'published');
    $this->drupalPost('node/' . $node_draft->nid . '/edit', $edit, t('Save'));

    // Check that the "Approved" node has had its moderation state updated and
    // has been published.
    $this->assertTrue($this->getPublicationStatus($node_draft->nid), 'A node in draft state with a scheduled publication date in the past is published when published manually.');
    $this->assertEqual($this->getModerationState($node_draft->nid), 'published', 'A node in draft state with a scheduled publication date in the past has the "Published" moderation state when published manually.');
  }

  // Test content type form options.
  public function testContentTypeForm() {
    $this->drupalGet('admin/structure/types/manage/' . $this->contentType->type);
    $this->assertFieldByName('scheduler_publish_moderation_state', workbench_moderation_state_published(), 'The default "Publishing" moderation state is set correctly.');
    $this->assertFieldByName('scheduler_unpublish_moderation_state', workbench_moderation_state_none(), 'The default "Unpublishing" moderation state is set correctly.');
  }

  /**
   * Returns the current publication status of a node.
   *
   * @param int $nid
   *   The nid of the node to check.
   *
   * @return bool
   *   TRUE if the node is published, FALSE if not.
   */
  protected function getPublicationStatus($nid) {
    return db_select('node', 'n')
      ->fields('n', array('status'))
      ->condition('nid', $nid)
      ->execute()
      ->fetchColumn();
  }

  /**
   * Returns the current moderation state of a node.
   *
   * @param int $nid
   *   The nid of the node to check.
   *
   * @return string
   *   The current moderation state of the node.
   */
  protected function getModerationState($nid) {
    return db_select('workbench_moderation_node_history', 'h')
      ->fields('h', array('state'))
      ->condition('nid', $nid)
      ->range(0, 1)
      ->orderBy('hid', 'DESC')
      ->execute()
      ->fetchColumn();
  }
}
