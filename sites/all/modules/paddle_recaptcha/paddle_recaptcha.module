<?php

/**
 * @file
 * Main functions and hook implementations for the Paddle reCAPTCHA module.
 */

// There is only one form ID for all simple contact pages.
define('PADDLE_RECAPTCHA_SIMPLE_CONTACT_FORM_ID', 'paddle_simple_contact_field_contact_form');

/**
 * Implements hook_apps_app_info().
 */
function paddle_recaptcha_apps_app_info() {
  return array(
    'configure form' => 'paddle_recaptcha_configuration_form',
  );
}

/**
 * Form callback displaying paddle formbuilder configuration.
 *
 * @see user_admin_permissions()
 */
function paddle_recaptcha_configuration_form() {
  $form = array();

  if (user_access('administer recaptcha')) {
    $form['recaptcha_general_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Form reCAPTCHA settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attributes' => array(
        'class' => array(drupal_html_class('form-recaptcha-settings')),
      ),
    );

    $form['recaptcha_general_settings']['recaptcha_site_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Site key'),
      '#default_value' => variable_get('recaptcha_site_key', ''),
      '#maxlength' => 40,
      '#description' => t('The site key given to you when you <a href="@url">register for reCAPTCHA</a>.', array('@url' => 'http://www.google.com/recaptcha/admin')),
      '#states' => array(
        'required' => array(
          ':input[name="recaptcha_secret_key"]' => array('filled' => TRUE),
        ),
      ),
    );

    $form['recaptcha_general_settings']['recaptcha_secret_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Secret key'),
      '#default_value' => variable_get('recaptcha_secret_key', ''),
      '#maxlength' => 40,
      '#description' => t('The secret key given to you when you <a href="@url">register for reCAPTCHA</a>.', array('@url' => 'http://www.google.com/recaptcha/admin')),
      '#states' => array(
        'required' => array(
          ':input[name="recaptcha_site_key"]' => array('filled' => TRUE),
        ),
      ),
    );
  }
  else {
    $form['empty_message'] = array(
      '#type' => 'item',
      '#markup' => t('You have insufficient access to configure the reCAPTCHA paddlet.'),
    );
  }

  $form['#validate'][] = 'paddle_recaptcha_configuration_form_validation';

  // Hide the original submit.
  $form['actions']['#attributes']['class'][] = 'hidden';

  return system_settings_form($form);
}

/**
 * Validates that either both fields need to be filled in or none of them.
 */
function paddle_recaptcha_configuration_form_validation($form, &$form_state) {
  if (!empty($form_state['values']['recaptcha_secret_key']) && empty($form_state['values']['recaptcha_site_key'])) {
    form_set_error('recaptcha_site_key', t('Site key field is required.'));
  }
  elseif (!empty($form_state['values']['recaptcha_site_key']) && empty($form_state['values']['recaptcha_secret_key'])) {
    form_set_error('recaptcha_secret_key', t('Secret key field is required.'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function paddle_recaptcha_form_form_builder_webform_save_form_alter(&$form, &$form_state) {
    // Add an extra submit handler to add captcha to the webform.
    $form['#submit'][] = 'paddle_recaptcha_add_captcha_to_webform';
}

/**
 * Extra submit handler to add a captcha setting if none exists.
 */
function paddle_recaptcha_add_captcha_to_webform($form, &$form_state) {
  module_load_include('inc', 'captcha');
  $webform_id = 'webform_client_form_' . $form['nid']['#value'];
  $existing_form_settings = captcha_get_form_id_setting($webform_id, TRUE);

  if (!isset($existing_form_settings) || $existing_form_settings == 'none') {
    captcha_set_form_id_setting($webform_id, 'default');
  }
}

/**
 * Retrieves all the form IDs of paddle_formbuilder webforms.
 *
 * @return array
 *   An array consisting of form IDs.
 */
function paddle_recaptcha_retrieve_all_existing_webform_form_ids() {
  $form_ids = array();
  if (module_exists('paddle_formbuilder')) {
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'paddle_formbuilder_page');

    $results = $query->execute();

    if (!empty($results['node'])) {
      foreach ($results['node'] as $nid => $value) {
        $form_ids[] = 'webform_client_form_' . $nid;
      }
    }
  }

  return $form_ids;
}

/**
 * Implements hook_modules_enabled().
 */
function paddle_recaptcha_modules_enabled($modules) {
  foreach ($modules as $module) {
    if ($module == 'paddle_simple_contact') {
      module_load_include('inc', 'captcha');
      captcha_set_form_id_setting(PADDLE_RECAPTCHA_SIMPLE_CONTACT_FORM_ID, 'default');
    }
  }
}

/**
 * Implements hook_is_configured().
 */
function paddle_recaptcha_is_configured() {
  $site_key = variable_get('recaptcha_site_key', '');
  $server_key = variable_get('recaptcha_secret_key', '');
  return ($site_key === '' || $server_key === '') ? FALSE : TRUE;
}
