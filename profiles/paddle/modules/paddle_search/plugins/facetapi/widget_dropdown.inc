<?php

/**
 * @file
 * The facetapi_dropdown widget plugin class.
 */

/**
 * Widget that renders facets as a select.
 */
class FacetapiWidgetDropdown extends FacetapiWidget {

  /**
   * Holds the current active item url.
   *
   * @var string
   */
  protected $active = '';

  /**
   * {@inheritdoc}
   */
  public function __construct($id, array $realm, FacetapiFacet $facet, stdClass $settings) {
    parent::__construct($id, $realm, $facet, $settings);

    // We are forced to do the same as FacetapiWidgetLinks class, because
    // rendering of facets in the realm block is done through facet name and
    // not alias (which is the default key).
    $this->key = $facet['name'];
  }

  /**
   * {@inheritdoc}
   */
  public function execute() {
    $element = &$this->build[$this->facet['field alias']];

    // Build the items, so the active property will be populated, if available.
    $items = $this->buildItems($element);

    // This is not a form (yet?) so form_process_select() is not called.
    // We have to append manually our empty option.
    // We use the current active item url for the empty option, so we can reset
    // the facet when selecting it. If no active item is here, an empty string
    // will be used instead.
    $options = array($this->active => t('- Choose -')) + $items;

    $element = array(
      '#type' => 'select',
      '#options' => $options,
      '#value' => '',
      '#attributes' => array(
        'class' => array('facetapi-widget-dropdown'),
      ),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'paddle_search') . '/js/widget_dropdown.js',
        ),
      ),
    );
  }

  /**
   * Builds the options array for the select element.
   *
   * @param array $build
   *   The items in the facet's render array being transformed.
   * @param int $depth
   *   The current depth on processing child items.
   *
   * @return array
   *   The list of options.
   */
  protected function buildItems($build, $depth = 0) {
    $settings = $this->settings->settings;

    // Build the prefix to use for the options, to show hierarchy.
    $prefix = str_repeat('-', $depth) . ($depth ? ' ' : '');

    $options = array();
    foreach ($build as $value => $item) {
      $url = url($item['#path'], array(
        'query' => $item['#query'],
      ));

      // If the item is active, the url generated by the url processor is an url
      // that allows deactivating this item. We store this url in the $active
      // property, using it for the empty option.
      // Warning: this will only work if 'limit_active_items' and
      // 'individual_parent' options are both active. Horrible things will
      // happen otherwise.
      if ($item['#active']) {
        $this->active = $url;
        $url = '';
      }

      $options[$url] = $prefix . $item['#markup'];

      // Build the children items, if any of them are available and the current
      // item is active or the facet is marked to show all children.
      if (!empty($item['#item_children']) && ($item['#active'] || !empty($settings['show_expanded']))) {
        $child_options = $this->buildItems($item['#item_children'], $depth + 1);
        $options += $child_options;
      }
    }

    return $options;
  }

  /**
   * {@inheritdoc}
   */
  public function settingsForm(&$form, &$form_state) {
    // @see FacetapiWidgetLinks::settingsForm()
    if ($this->facet['hierarchy callback']) {
      $form['widget']['widget_settings']['links'][$this->id]['show_expanded'] = array(
        '#type' => 'checkbox',
        '#title' => t('Expand hierarchy'),
        '#default_value' => !empty($this->settings->settings['show_expanded']),
        '#description' => t('Show the entire tree regardless of whether the parent items are active.'),
        '#states' => array(
          'visible' => array(
            'select[name="widget"]' => array('value' => $this->id),
          ),
        ),
      );
    }
  }

  /**
   * {@inheritdoc}
   */
  public function getDefaultSettings() {
    return array(
      'show_expanded' => 1,
    );
  }

}
