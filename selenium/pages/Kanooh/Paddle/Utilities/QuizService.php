<?php

/**
 * @file
 * Contains \Kanooh\Paddle\Utilities\QuizService.
 */

namespace Kanooh\Paddle\Utilities;

use Kanooh\Paddle\Pages\Admin\Apps\PaddleApps\PaddleQuiz\AddEditPage\AddPage;
use Kanooh\Paddle\Pages\Admin\Apps\PaddleApps\PaddleQuiz\ConfigurePage\ConfigurePage;
use Kanooh\Paddle\Pages\Element\Quiz\Edit\QuizFormFiller;
use Kanooh\Paddle\Pages\Element\Quiz\View\QuizForm;
use Kanooh\Paddle\Pages\PaddlePage;
use Kanooh\TestDataProvider\AlphanumericTestDataProvider as Random;
use Kanooh\WebDriver\WebDriverTestCase;

/**
 * Class QuizService
 * @package Kanooh\Paddle\Utilities
 */
class QuizService
{
    /**
     * Protected construct method so the class can't be instantiated.
     */
    protected function __construct()
    {
    }

    /**
     * Creates a new quiz entity and stores it in the database.
     *
     * Requires Drupal to be bootstrapped, using DrupalService.
     *
     * @param array $values
     *   List of property values to set on the quiz entity.
     *
     * @return \QuizEntity
     *   Newly created quiz entity object.
     */
    public static function create(array $values = array())
    {
        // Make sure certain properties have a default value.
        $random = new Random();
        $defaults = array(
            'title' => $random->getValidValue(8),
        );
        $values = array_merge($defaults, $values);

        // Create and save the new quiz entity.
        $quiz = new \QuizEntity($values);
        $quiz->save();

        // Return the entity object.
        return $quiz;
    }

    /**
     * Deletes a specific list of quizzes, or all quizzes if no ids specified.
     *
     * Requires Drupal to be bootstrapped, using DrupalService.
     *
     * @param mixed $qids
     *   List of ids of the quizzes to delete, or a single quiz id, or false to
     *   delete all quizzes. Defaults to false.
     */
    public static function delete($qids = false)
    {
        if (!empty($qids) && !is_array($qids)) {
            $qids = array($qids);
        }

        // Load all quizzes matching the provided quiz ids.
        $quizzes = entity_load('paddle_quiz', $qids);

        // Delete each quiz.
        foreach ($quizzes as $quiz) {
            entity_delete('paddle_quiz', $quiz->qid);
        }
    }

    /**
     * Generates random data to use when creating/editing a quiz entity.
     *
     * @param WebDriverTestCase $webdriver
     *   The webdriver class. (Necessary to generate random images.)
     *
     * @return array
     *   Array of randomly generated data, keyed by:
     *     - title: String.
     *     - questions: Array of 3 questions, each question is an array with:
     *       - title: String.
     *       - image: Image data generated by the AssetCreationService class.
     *       - answers: Array of 3 strings.
     *       - correct_answer: Int indicating the index of the correct answer.
     *     - customize: Array of data to use in the "customize" form. The keys
     *         are the names of the fields in the QuizCustomizeForm class.
     *     - design: Array of data to use in the "design" form. The keys are the
     *         names of the fields in the QuizDesignForm class.
     */
    public static function generateRandomData(WebDriverTestCase $webdriver)
    {
        $asset_creation_service = new AssetCreationService($webdriver);
        $random = new Random();
        $data = array();

        $data['title'] = $random->getValidValue(8);

        for ($i = 0; $i < 3; $i++) {
            $data['questions'][] = array(
                'title' => $random->getValidValue(8),
                'image' => $asset_creation_service->createImage(),
                'answers' => array(
                    $random->getValidValue(8),
                    $random->getValidValue(8),
                    $random->getValidValue(8),
                ),
                'correct_answer' => $random->generateRandomInteger(0, 2),
            );
        }

        $data['customize'] = array(
            'startTitle' => $random->getValidValue(12),
            'startSubtitle' => $random->getValidValue(12),
            'startMessage' => $random->getValidValue(24),
            'startButtonLabel' => $random->getValidValue(8),
            'tiebreakerQuestion' => $random->getValidValue(12),
            'tiebreakerLabel' => $random->getValidValue(8),
            'disclaimer' => $random->getValidValue(24),
            'infoTitle' => $random->getValidValue(12),
            'infoMessage' => $random->getValidValue(24),
            'infoButtonLabel' => $random->getValidValue(8),
            'resultTitle' => $random->getValidValue(12),
            'resultMessage' => $random->getValidValue(24),
            'previousButtonLabel' => $random->getValidValue(8),
            'nextButtonLabel' => $random->getValidValue(8),
        );

        $data['design']['startImage'] = $asset_creation_service->createImage();

        return $data;
    }

    /**
     * Creates a quiz entity with all fields filled in.
     *
     * @param WebDriverTestCase $webdriver
     *   Webdriver object. Necessary to interact with the UI.
     * @param array $fields
     *   Data as generated by QuizService::generateRandomData().
     * @param boolean $info_end
     *   Set the location of the info screen to the end of the quiz or not.
     * @param boolean $info_name
     *   Require the user's name on the info screen or not.
     * @param boolean $customized
     *   Whether the quiz applicant needs to share his info or not.
     *
     * @return int
     *   Quiz id.
     */
    public static function createViaUI(WebDriverTestCase $webdriver, $fields, $info_end = false, $info_name = false, $customized = true)
    {
        $configure_page = new ConfigurePage($webdriver);
        $add_page = new AddPage($webdriver);

        // Go to the configuration page and get all Quiz IDs.
        $configure_page->go();
        $qids = $configure_page->quizTable->getQids();

        // Go to the quiz add page.
        $configure_page->contextualToolbar->buttonCreate->click();
        $add_page->checkArrival();

        // Fill in the title, questions and answers.
        QuizFormFiller::fillQaForm($add_page->qaForm, $fields);

        // Click the button to go to the next step. (Customization)
        $add_page->qaForm->nextStepButton->click();
        $add_page->checkArrival();

        if ($customized) {
            // Fill in the fields on the customization form using random data.
            QuizFormFiller::fillCustomizeForm($add_page->customizeForm, $fields);

            if ($info_end) {
                $add_page->customizeForm->infoLocationEnd->select();
            } else {
                $add_page->customizeForm->infoLocationStart->select();
            }
            if ($info_name) {
                $add_page->customizeForm->infoNameAndEmail->select();
            }
        }

        // Click the button to go to the next step. (Design)
        $add_page->customizeForm->nextStepButton->click();
        $add_page->checkArrival();

        // Fill in the fields on the design form using random data.
        QuizFormFiller::fillDesignForm($add_page->designForm, $fields);

        // Save the quiz.
        $add_page->contextualToolbar->buttonSave->click();
        $configure_page->checkArrival();

        // Make sure there's exactly one new quiz. (Important because a
        // potential bug could be that a new quiz is created between each
        // step.)
        $new_qids = $configure_page->quizTable->getQids();
        $webdriver->assertCount(count($qids) + 1, $new_qids);

        // Return the new quiz's id.
        $new_qids = array_values(array_diff($new_qids, $qids));

        return $new_qids[0];
    }

    /**
     * Participates in a quiz with a given e-mail address.
     *
     * @param WebDriverTestCase $webdriver
     *   Webdriver object. Necessary to interact with the UI.
     * @param PaddlePage $page
     *   Page with a quizForm property.
     * @param array $fields
     *   Data as generated by QuizService::generateRandomData().
     * @param array $options
     *   Array containing the following keys:
     *     - 'email': E-mail address of the participant.
     *     - 'name': Name of the participant (optional).
     *     - 'answers': Array of answer indexes to select.
     *     - 'tiebreaker': Answer for the tiebreaker (optional).
     */
    public static function participateViaUI(WebDriverTestCase $webdriver, PaddlePage $page, $fields, $options)
    {
        /* @var QuizForm $form */
        // The quiz multi-step form. Needs to be re-assigned to a variable each time it has reloaded, because
        // dynamically getting it from the $page each time is too unreliable when waiting for it to reload. This was
        // causing random failures because when accessing the waitUntil methods like $page->quizForm->waitUntil... the
        // form would be fetched from the page first and a new QuizForm object would be constructed. In between the
        // retrieving of the form element and the construction of the object, the form element could have been replaced
        // with a new one and the test would fail. See also waitUntilFormBuildIdChanges() on Form class, which suffers
        // from the same problem.
        $form = $page->quizForm;

        $form->startScreen->nextButton->click();
        $form->waitUntilScreenIsNoLongerPresent('start');

        // Get the reloaded form from the page.
        $form = $page->quizForm;

        // Info screen if it's at the start.
        if ($form->currentScreenName == 'info') {
            // Enter the necessary user information.
            $form->infoScreen->email->fill($options['email']);
            if ($form->infoScreen->isNameFieldPresent()) {
                $form->infoScreen->name->fill($options['name']);
            }

            // Go to the next screen.
            $form->infoScreen->nextButton->click();
            $form->waitUntilScreenIsVisible('question');
        }

        // Go over all questions.
        foreach ($fields['questions'] as $question_data) {
            // Wait until the question is visible.
            $webdriver->waitUntilTextIsPresent($question_data['title']);

            // Get the reloaded form from the page.
            $form = $page->quizForm;

            // Select the correct answer.
            $answer = $question_data['correct_answer'];
            $answered[] = $answer;
            $form->questionScreen->answers[$answer]->select();

            // Go to the next screen.
            $form->questionScreen->nextButton->click();
        }

        // Wait until the next screen after the questions is visible.
        $form->waitUntilScreenIsNoLongerPresent('question');

        // Get the reloaded form from the page.
        $form = $page->quizForm;

        // Tiebreaker if enabled.
        if ($form->currentScreenName == 'tiebreaker') {
            // Enter the tiebreaker.
            $form->tiebreakerScreen->answer->fill($options['tiebreaker']);

            // Go to the next screen.
            $form->tiebreakerScreen->nextButton->click();
            $form->waitUntilScreenIsNoLongerPresent('tiebreaker');

            // Get the reloaded form from the page.
            $form = $page->quizForm;
        }

        // Info screen if it's at the end.
        if ($form->currentScreenName == 'info') {
            // Enter the necessary user information.
            $form->infoScreen->email->fill($options['email']);
            if ($form->infoScreen->isNameFieldPresent()) {
                $form->infoScreen->name->fill($options['name']);
            }

            // Go to the result screen.
            $form->infoScreen->nextButton->click();
            $form->waitUntilScreenIsVisible('result');
        }
    }

    /**
     * Retrieves all participation records for a quiz from the database.
     *
     * @param int $qid
     *   Quiz id. Omit or set to 0 to get the participations for all quizzes.
     * @param string $email
     *   E-mail address of the participant. (Optional)
     *
     * @return object[]
     *   Participation records, with the same properties as the fields in the
     *   paddle_quiz_participation table plus an 'answers' property, which is
     *   an array of objects with the same properties as the fields in the
     *   paddle_quiz_answer table.
     */
    public static function getParticipations($qid = 0, $email = '')
    {
        $participation_select = db_select('paddle_quiz_participation', 'p')
            ->fields('p');

        if (!empty($qid)) {
            $participation_select->condition('qid', $qid);
        }
        if (!empty($email)) {
            $participation_select->condition('email', $email);
        }

        $participations = $participation_select->execute()
            ->fetchAllAssoc('pid');
        $participations = array_values($participations);

        foreach ($participations as &$participation) {
            $answers = db_select('paddle_quiz_answer', 'a')
                ->fields('a')
                ->condition('pid', $participation->pid)
                ->execute()
                ->fetchAllAssoc('question');
            $participation->answers = array_values($answers);
        }

        return $participations;
    }
}
