<?php

/**
 * @file
 * Contains \Kanooh\Paddle\Pages\Element\Wysiwyg\CKEditorModal.
 */

namespace Kanooh\Paddle\Pages\Element\Wysiwyg;

use Kanooh\Paddle\Pages\Element\Modal\Modal;
use Kanooh\WebDriver\WebDriverTestCase;

/**
 * Base class for the modal dialogs generated by CKEditor.
 */
abstract class CKEditorModal extends Modal
{
    /**
     * The XPath selector that identifies the modal overlay.
     */
    protected $overlayXPathSelector = '';

    /**
     * The XPath selector that identifies the close button.
     */
    protected $closeButtonXPathSelector = '//a[contains(@class, "cke_dialog_close_button")]';

    /**
     * The XPath selector that identifies the submit button.
     */
    protected $submitButtonXPathSelector = '//a[contains(@class, "cke_dialog_ui_button_ok")]';

    /**
     * Constructs a CKEditorModal object.
     *
     * @param \Kanooh\WebDriver\WebDriverTestCase $webdriver
     *   The Selenium web driver test case.
     * @param string $editor_id
     *   The editor id. This usually matches the field name (for example
     *   'edit-body-und-0-value'). You can also inspect the CKEDITOR.instances
     *   variable in the javascript console to find it.
     * @param string $title
     *   The title of the modal window. This is used to discover the modal in
     *   the DOM.
     */
    public function __construct(WebDriverTestCase $webdriver, $editor_id, $title)
    {
        // CKEditor uses numerical IDs so we have to rely on textual content to
        // discover our elements. Please excuse the XPath from hell.
        $this->xpathSelector = '//div[contains(concat(" ", normalize-space(@class), " "), " cke_editor_' . $editor_id . '_dialog ")][.//div[@class = "cke_dialog_title" and normalize-space(text()) = normalize-space("' . $title .'")]]';

        parent::__construct($webdriver);
    }

    /**
     * {@inheritdoc}
     */
    public function waitUntilClosed()
    {
        $this->webdriver->waitUntilElementIsNotDisplayed($this->xpathSelector);
    }

    /**
     * {@inheritdoc}
     */
    protected function getUniqueIds()
    {
        // The CKEditor modals & overlays don't have any unique ID's.
        $this->uniqueBackdropId = '';
        $this->uniqueContentId = '';
    }

    /**
     * Returns an XPath selector for a specific tab number.
     *
     * @param string $tab
     *   Name of the tab. (Same as the name attribute of the div)
     *
     * @return string
     */
    public function getTabXPathSelector($tab)
    {
        // Get all tabs divs, and select the nth tab.
        $xpath = '(.//div[@role = "tabpanel" and @name="' . $tab . '"])';
        return $xpath;
    }

    /**
     * Waits until a specific tab is displayed.
     *
     * @param string $tab
     *   Name of the tab. (Same as the name attribute of the div)
     */
    public function waitUntilTabDisplayed($tab)
    {
        $xpath = $this->getTabXPathSelector($tab);
        $this->webdriver->waitUntilElementIsDisplayed($xpath);
    }

    /**
     * Sets the modal width and height to a certain value.
     *
     * Pay attention that this method actually targets the current CKEditor
     * that is on top, and not this particular CKEditor instance.
     *
     * @param int $width
     *   The wanted width.
     * @param int $height
     *   The wanted height.
     */
    public function resize($width, $height)
    {
        $this->webdriver->execute(
            array(
                'script' => "CKEDITOR.dialog.getCurrent().resize($width, $height)",
                'args' => array(),
            )
        );
    }

    /**
     * Retrieves the current width and height of the modal content.
     *
     * Pay attention that this method actually targets the current CKEditor
     * that is on top, and not this particular CKEditor instance.
     *
     * @return array
     *   An array with width and height keys and their value.
     */
    public function getContentSize()
    {
        $size = $this->webdriver->execute(
            array(
                'script' => 'return CKEDITOR.dialog.getCurrent()._.contentSize',
                'args' => array(),
            )
        );

        return array_map('intval', $size);
    }
}
